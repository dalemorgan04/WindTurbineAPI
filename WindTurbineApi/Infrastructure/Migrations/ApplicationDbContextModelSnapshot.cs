// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WindTurbineApi.Infrastructure.Persistence;

#nullable disable

namespace WindTurbineApi.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("WindTurbine.Domain.Entities.Sensor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("WindTurbine.Domain.Entities.SensorRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SensorId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.ToTable("SensorRecords");
                });

            modelBuilder.Entity("WindTurbine.Domain.Entities.SensorRecord", b =>
                {
                    b.HasOne("WindTurbine.Domain.Entities.Sensor", "Sensor")
                        .WithMany("SensorRecords")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("WindTurbineApi.Domain.ValueObjects.ReadingValue", "Reading", b1 =>
                        {
                            b1.Property<Guid>("SensorRecordId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<double>("Value")
                                .HasColumnType("REAL");

                            b1.HasKey("SensorRecordId");

                            b1.ToTable("SensorRecords");

                            b1.WithOwner()
                                .HasForeignKey("SensorRecordId");
                        });

                    b.Navigation("Reading")
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("WindTurbine.Domain.Entities.Sensor", b =>
                {
                    b.Navigation("SensorRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
